name: Release
on:
    push:
        branches:
            - debug/release
        tags:
            - "v[0-9]+.[0-9]+.[0-9]+-(rc[0-9]+)?"

jobs:
    create-release:
        name: create-release
        runs-on: ubuntu-latest
        steps:
            - name: Create artifacts directory
              run: mkdir artifacts

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false

            - name: Save release upload URL to artifact
              run: echo "${{ steps.create_release.outputs.upload_url }}" > artifacts/release-upload-url

            - name: Save version number to artifact
              run: echo "${{ github.ref }}" > artifacts/release-version

            - name: Upload artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: artifacts
                  path: artifacts

    build-release:
        name: build-release
        needs: ["create-release"]
        runs-on: ${{ matrix.os }}
        env:
            builder_image: meldron/psonoci_builder
        strategy:
            matrix:
                build: [linux, linux-armv7, linux-aarch64, macos, win-gnu]
                include:
                    - build: linux
                      os: ubuntu-18.04
                      target: x86_64-unknown-linux-musl
                    - build: linux-armv7
                      os: ubuntu-18.04
                      target: armv7-unknown-linux-musleabihf
                    - build: linux-aarch64
                      os: ubuntu-18.04
                      target: aarch64-unknown-linux-musl
                    - build: macos
                      os: macos-latest
                      target: x86_64-apple-darwin
                    - build: win-gnu
                      os: ubuntu-18.04
                      target: x86_64-pc-windows-gnu

        steps:
            - uses: actions/checkout@v2

            - name: install rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.target }}
                  override: true

            - name: Pull docker image used by cross
              if: matrix.target != 'x86_64-pc-windows-gnu' && matrix.target != 'x86_64-apple-darwin'
              run: docker pull $builder_image:${{ matrix.target }}

            # - name: Build docker image used by cross
            #   if: matrix.target != 'x86_64-pc-windows-gnu'
            #   run: docker build build_files --cache-from $builder_image:${{ matrix.target }} --file build_files/Dockerfile-${{ matrix.target }} --tag $builder_image:${{ matrix.target }}

            - name: build with cross
              uses: actions-rs/cargo@v1
              if: matrix.os == 'ubuntu-18.04'
              with:
                  use-cross: true
                  command: build
                  args: --release --target ${{ matrix.target }}

            - name: build with cargo
              uses: actions-rs/cargo@v1
              if: matrix.os != 'ubuntu-18.04'
              with:
                  use-cross: false
                  command: build
                  args: --release --target ${{ matrix.target }}

            - name: Get release download URL
              uses: actions/download-artifact@v1
              with:
                  name: artifacts
                  path: artifacts

            - name: Set release upload URL and release version
              shell: bash
              run: |
                  release_upload_url="$(cat artifacts/release-upload-url)"
                  echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
                  echo "release upload url: $RELEASE_UPLOAD_URL"
                  release_version="$(cat artifacts/release-version)"
                  echo "::set-env name=RELEASE_VERSION::$release_version"
                  echo "release version: $RELEASE_VERSION"

            - name: Build archive
              shell: bash
              run: |
                  staging="psonoci-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
                  mkdir -p "$staging"
                  if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
                    cp "target/${{ matrix.target }}/release/psonoci.exe" "$staging/"
                    7z a "$staging.zip" "$staging"
                    echo "::set-env name=ASSET::$staging.zip"
                  else
                    cp "target/${{ matrix.target }}/release/psonoci" "$staging/"
                    tar czf "$staging.tar.gz" "$staging"
                    echo "::set-env name=ASSET::$staging.tar.gz"
                  fi

            - name: Upload release archive
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ env.RELEASE_UPLOAD_URL }}
                  asset_path: ${{ env.ASSET }}
                  asset_name: ${{ env.ASSET }}
                  asset_content_type: application/octet-stream
