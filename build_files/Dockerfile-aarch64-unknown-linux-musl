# cross dockerfile by Jorge Aparicio (https://github.com/rust-embedded/cross/)
# see build_files/cross_files/LICENSE for license information
FROM ubuntu:18.04

COPY cross_files/common.sh cross_files/lib.sh /
RUN /common.sh

COPY cross_files/cmake.sh /
RUN /cmake.sh

COPY cross_files/xargo.sh /
RUN /xargo.sh

COPY cross_files/qemu.sh /
RUN /qemu.sh aarch64

COPY cross_files/musl.sh /
RUN /musl.sh TARGET=aarch64-linux-musl

# Allows qemu run dynamic linked binaries
RUN ln -sf \
    /usr/local/aarch64-linux-musl/lib/libc.so \
    /usr/local/aarch64-linux-musl/lib/ld-musl-aarch64.so.1
ENV QEMU_LD_PREFIX=/usr/local/aarch64-linux-musl

COPY cross_files/aarch64-linux-musl-gcc.sh /usr/bin/
RUN chmod a+rx /usr/bin/aarch64-linux-musl-gcc.sh

ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc.sh \
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUNNER=qemu-aarch64 \
    CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc \
    CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++ \
    RUST_TEST_THREADS=1

COPY build_openssl.sh /
# first parameter is the openssl arch target (see openssls ./Configure LIST)
RUN bash /build_openssl.sh linux-aarch64 aarch64-linux-musl-

ENV OPENSSL_DIR=/openssl \
    OPENSSL_INCLUDE_DIR=/openssl/include \
    OPENSSL_LIB_DIR=/openssl/lib \
    OPENSSL_STATIC=1 \
    TARGET=musl


# workaround for this one here:
# https://github.com/rust-embedded/cross/issues/260
RUN apt-get update && apt-get install -y wget
RUN mkdir -m777 /opt/rust /opt/cargo
ENV RUSTUP_HOME=/opt/rust CARGO_HOME=/opt/cargo PATH=/opt/cargo/bin:$PATH
RUN wget --https-only --secure-protocol=TLSv1_2 -O- https://sh.rustup.rs | sh /dev/stdin -y
RUN rustup target add aarch64-unknown-linux-musl
RUN printf '#!/bin/sh\nexport CARGO_HOME=/opt/cargo\nexec /bin/sh "$@"\n' >/usr/local/bin/sh
RUN chmod +x /usr/local/bin/sh
